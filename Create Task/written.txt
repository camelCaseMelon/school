The program is a game in which the user must correctly guess in which order they need to click the square buttons. Each will only need to be clicked once. The game can be played with four or six buttons.
First, when you try to advance without selecting a number of buttons to play with, a message will prompt you to select this. Then, the video demonstrates a playthrough of the game with four buttons and a playthrough with six. Each time, upon hitting the new game button, the game will revert to its original state so that a new sequence can be developed and it can be played again.
When the user inputs which amount of buttons they would like to play with by clicking one of the two radio buttons and then starting the game, the game will take this input and show the selected number of buttons on the main game screen.
The name of the list being processed in these images is numList.
numList stores numbers that represent the order in which the buttons must be clicked to win the game. Without it, the game could not be played.
If numList had not existed, there would need to be individual variables for each value in the order. Half the time, two variables would not be used because the player would only be playing with four buttons, leaving the other two variables as extraneous code, while the list is much more flexible in length. Furthermore, where the order is easily determined in the current code by using a for loop to check against the prior values in the list, this process would be much more complex with individual variables, requiring multiple if statements for each number to be determined. Finally, the game would need to manually check the score and compare the clicked button with the required variable instead of the simple method in the program of checking numList[score] and seeing if it matches the button clicked.
The function newGame() makes visible the buttons that are needed for the game and then determines a new order for the buttons to be clicked in order to win.
First, the function uses iteration in order to make four or six buttons visible, depending on the parameter passed based on the option selected by the player. Determining the order is more complex. The function uses iteration to make sure the resulting list represents an order of the correct length (4 or 6, again depending on numShapes). The loop ends when the length of the resulting list, numList, is less than numShapes, the parameter. Within this loop, several variables are redefined for each iteration; add, a boolean which describes whether or not to add the number into the order, is reset to true, and tempNum, the number to be tested, is set to a new value. It then uses iteration through the already established numbers in numList to determine if the value of tempNum has already been used in the order; if so, add is switched to false. If after this process add is still true, tempNum is added to numList and the loop continues to iterate until numList is full.
My first call is newGame(4).
My second call is newGame(6).